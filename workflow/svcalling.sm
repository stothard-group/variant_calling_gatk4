from os.path import join, exists, basename
import pandas as pd

#########################################################################################
# Path to config file
#########################################################################################

configfile: "config/svcalling.config.yaml"

localrules: make_fai, make_bai, bgzip_chromstats, pipeline_info, create_md5s

#########################################################################################
# Set local variables
#########################################################################################

#########################################################################################
# Values from config file
#########################################################################################
SNPSIFT_EX = config["snpsift_executable"]
REFERENCE_DIR = config["reference_dir"]
GENOME_FULL = REFERENCE_DIR + config["basename"] + ".fa"
PARTITION = config["partition"]
ANNOTATION_GFF = config["annotation_gff"]
CHROMSTATS = config["chromstats"]
EXCLUDE = config["exclude"]


#########################################################################################
# Directory structure
#########################################################################################

RESULTS_DIR = "processed-data/"
BASE_QUALITY_RECAL = RESULTS_DIR + "base_quality_recal/"
SMOOVE_DIR = RESULTS_DIR + "smoove/"
GENOTYPE_DIR = RESULTS_DIR + "smoove/genotyped/"
MANTA_DIR = RESULTS_DIR + "manta/"
FINAL_DIR = RESULTS_DIR + "final_results/"

#########################################################################################
# regular expression matching to get sample names
#########################################################################################
samples, = glob_wildcards(BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam")

# Genomic intervals
chr_list = [config["chr_prefix"] + str(i) for i in range(int(config["autosomes_range_first"]), int(config["autosomes_range_last"]) + 1)] + config["other_chrs"]


#########################################################################################
# rule to trigger generation of target files
#########################################################################################
rule final:
    input:
#        GENOME_FULL + ".fai",
 #       expand(BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam.bai", sample=samples),
 #       expand(GENOTYPE_DIR + "results.smoove.square.anno.filter.vcf"),
#        expand(MANTA_DIR + "{sample}.manta.INS.vcf.gz", sample=samples),
#        CHROMSTATS + ".gz.tbi",
#        expand(MANTA_DIR + "CHR_{chr}/results/variants/diploidSV.vcf.gz", chr=chr_list)
#        MANTA_DIR + "manta_SV.vcf.gz",
#        RESULTS_DIR + "SV.vcf.gz",
#        FINAL_DIR + "sv_md5sum.txt"
        FINAL_DIR + "smoove.vcf.gz",
        FINAL_DIR + "smoove.vcf.gz.tbi",
        FINAL_DIR + "manta.vcf.gz",
        FINAL_DIR + "manta.vcf.gz.tbi"
        FINAL_DIR + "sv_md5sum.txt"

#########################################################################################
# Smoove
#########################################################################################
rule make_fai:
    input:
        GENOME_FULL
    output:
        GENOME_FULL + ".fai"
    priority: 1
    shell:
        """
        module load samtools
        samtools faidx {input}
        """

rule make_bai:
    input:
        BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam"
    output:
        BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam.bai"
    shell:
        """
        module load samtools
        samtools index {input}
        """


rule smoove_call:
    input:
        BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam"
    params:
        sam = lambda wildcards: wildcards.sample
    singularity:
        "smoove.sif"
    threads: 2
    resources:
        cores = 2,
        runtime = 360,
        mem_mb = 16000
    output:
        SMOOVE_DIR + "{sample}-smoove.genotyped.vcf.gz"
    shell:
        """
        smoove call --outdir {SMOOVE_DIR} --name {params.sam} --fasta {GENOME_FULL} -p {threads} --genotype {input} 
        """


rule smoove_merge:
    input:
        expand(SMOOVE_DIR + "{sample}-smoove.genotyped.vcf.gz", sample=samples)
    params:
        SMOOVE_DIR + "*.genotyped.vcf.gz"
    singularity:
        "smoove.sif"
    threads: 2
    resources:
        cores = 2,
        runtime = 60,
        mem_mb = 8000
    output:
        SMOOVE_DIR + "merged.sites.vcf.gz"
    shell:
        """
        smoove merge --name merged -f {GENOME_FULL} --outdir {SMOOVE_DIR} {params}
        """

rule smoove_genotype:
    input:
        bam = BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam",
        merged = SMOOVE_DIR + "merged.sites.vcf.gz"
    singularity:
        "smoove.sif"
    params:
        sam = lambda wildcards: wildcards.sample
    threads: 2
    resources:
        cores = 2,
        runtime = 420,
        mem_mb = 8000
    output:
        GENOTYPE_DIR + "{sample}-joint-smoove.genotyped.vcf.gz"
    shell:
        """
        smoove genotype -d -x -p {threads} --name {params.sam}-joint --outdir {GENOTYPE_DIR} --fasta {GENOME_FULL} --vcf {input.merged} {input.bam}
        """

rule smoove_paste:
    input:
        expand(GENOTYPE_DIR + "{sample}-joint-smoove.genotyped.vcf.gz", sample=samples)
    output:
        GENOTYPE_DIR + "results.smoove.square.vcf.gz"
    singularity:
        "smoove.sif"
    params:
        GENOTYPE_DIR + "*.vcf.gz"
    threads: 2
    resources:
        cores = 2,
        runtime = 60,
        mem_mb = 8000
    shell:
        """
        smoove paste --name results {params}
        mv results.smoove.square.vcf.gz {output}
        """

rule smoove_annotate:
    input:
        square = GENOTYPE_DIR + "results.smoove.square.vcf.gz",
        annot = ANNOTATION_GFF
    output:
        GENOTYPE_DIR + "results.smoove.square.anno.vcf"
    singularity:
        "smoove.sif"
    threads: 2
    resources:
        cores = 2,
        runtime = 60,
        mem_mb = 8000
    shell:
        """
        smoove annotate --gff {input.annot} {input.square} > {output}
        """

rule smoove_filter:
    input:
        GENOTYPE_DIR + "results.smoove.square.anno.vcf"
    output:
        GENOTYPE_DIR + "results.smoove.square.anno.filter.vcf"
    threads: 1
    resources:
        cores = 1,
        runtime = 60,
        mem_mb = 2000
    shell:
        """
        module load java/21.0.1
        java -Xmx{resources.mem_mb}m -jar {SNPSIFT_EX}  filter " ((( MSHQ > 3 ) & (SVTYPE = 'BND')) | (( MSHQ > 3 ) & (SVTYPE = 'INS')) | (( MSHQ > 3 ) & (SVTYPE = 'DEL') & ( GEN[*].DHFFC < 0.7) ) | (( MSHQ > 3 ) & (SVTYPE = 'DUP') & ( GEN[*].DHFFC > 1.25))) " {input} > {output}
        """



#########################################################################################
# Manta
#########################################################################################

rule bgzip_chromstats:
    input:
        {CHROMSTATS}
    output:
        bgzip = CHROMSTATS + ".gz",
        idx = CHROMSTATS + ".gz.tbi"

    shell:
        """
        module load htslib
        bgzip -c {input} > {output.bgzip}
        tabix {output.bgzip}
        """

rule manta_separate:
    input:
        samples = expand(BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam", sample=samples),
        idx = CHROMSTATS + ".gz"
    params:
        mem_gb = 60,
        chr = lambda wildcards: wildcards.chr,
        input_line = " --bam ".join(expand(BASE_QUALITY_RECAL + "{sample}.m.md.recal.bam",
            sample=samples)),
        dirname = lambda wildcards:  "CHR_" + wildcards.chr,
    threads: 6
    resources:
        cores = 6,
        runtime = 2880,
        mem_mb = 64000,
    output:
        sv = expand(MANTA_DIR + "CHR_{{chr}}/results/variants/diploidSV.vcf.gz", chr=chr_list)
    shell:
        """
        module load StdEnv/2020 gcc/9.3.0 openmpi/4.0.3
        module load manta
        configManta.py --bam {params.input_line} \
        --referenceFasta {GENOME_FULL} \
        --callRegions {input.idx} \
        --region={params.chr} \
        --runDir $SLURM_TMPDIR/{params.dirname}/ \
        --callMemMb=40000

        $SLURM_TMPDIR/{params.dirname}/runWorkflow.py -j {resources.cores} -g {params.mem_gb}

        cp -r $SLURM_TMPDIR/{params.dirname} {MANTA_DIR}
        echo "Done!"
        """

rule manta_combine:
    input:
        files = expand(MANTA_DIR + "CHR_{chr}/results/variants/diploidSV.vcf.gz", chr=chr_list),
        flist = "db/input_variant_files.list"
    output:
        MANTA_DIR + "manta_SV.vcf.gz"
    threads: 4
    resources:
        cores = 4,
        runtime = 120,
        mem_mb = 32000,
    shell:
        """
        module load picard;
        java  -Xmx{resources.mem_mb}m -jar $EBROOTPICARD/picard.jar  MergeVcfs \
        -I {input.flist} \
        -O {output}
        """
    



#########################################################################################
# get workflow information, create md5sums
#########################################################################################

rule index_svs:
    input:
        manta = MANTA_DIR + "manta_SV.vcf.gz",
        smoove = GENOTYPE_DIR + "results.smoove.square.anno.filter.vcf"
    output:
        smoove = GENOTYPE_DIR + "results.smoove.square.anno.filter.sorted.vcf"
        sm_zip = GENOTYPE_DIR + "results.smoove.square.anno.filter.sorted.vcf.gz"
        sm_vcf = FINAL_DIR + "smoove.vcf.gz",
        sm_idx = FINAL_DIR + "smoove.vcf.gz.tbi"
        mn_vcf = FINAL_DIR + "manta.vcf.gz",
        mn_idx = FINAL_DIR + "manta.vcf.gz.tbi"
    threads: 1
    resources:
        cores = 1,
        runtime = 360,
        mem_mb = 4000,
    shell:
        """
        module load picard
        module load htslib
        java  -Xmx{resources.mem_mb}m -jar $EBROOTPICARD/picard.jar SortVcf \
            -I {input.smoove} -O {output.smoove}
        tabix -p vcf {input.manta}
        bgzip {output.smoove}
        tabix -p vcf {output.sm_zip}
        cp {input.manta} {output.mn_vcf}
        cp {input.manta}.tbi {mx_idx}
        cp {output.sm_zip} {output.sm_vcf}
        cp {output.sm_zip}.tbi {sm_idx}
        """

rule pipeline_info:
    input:
        FINAL_DIR + "smoove.vcf.gz",
        FINAL_DIR + "manta.vcf.gz",
    output:
        wf = FINAL_DIR + "SVCalling.sm",
        vs = FINAL_DIR + "sv_program_versions.txt"
    shell:
        """
        cp workflow/svcalling.sm {output.wf};
        ./scripts/sv_program_versions.sh {output.vs} {SNPSIFT_EX}
        """


rule create_md5s:
    input:
        sm_vcf = FINAL_DIR + "smoove.vcf.gz",
        sm_idx = FINAL_DIR + "smoove.vcf.gz.tbi",
        mn_vcf = FINAL_DIR + "manta.vcf.gz",
        mn_idx = FINAL_DIR + "manta.vcf.gz.tbi"
        wf = FINAL_DIR + "SVCalling.sm",
        vs = FINAL_DIR + "sv_program_versions.txt"
    output:
        FINAL_DIR + "sv_md5sum.txt"
    shell:
        """
        rm -f {output}
        md5sum {FINAL_DIR}/* > {output}
        """


